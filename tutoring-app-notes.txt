:: JAVASCRIPT THEORY ::

When creating a dictionary in JS, the elements inside are known as properties (the equivalent of key-value pairs or items in Python). These can be accessed using dot notation or backet notation, though the former is more common. 

Example:
person.name = 'Atikah';  // dictionary "person" has property "name" which are now changing to "Atikah"

If we don't know at runtime which property will be changed, then bracket notation can be used, so we can pass a variable into the square brackets.

Example:
let selectedProperty = 'name';  // a string variable for the property
person[selectedProperty] = 'Atikah';  // using the variable to acccess the property

:: NODE THEORY ::

Every web browser has a JS engine e.g. SpiderMonkey for FireFox and v8 for Chrome. Node JS was born when a developer took the open source v8 code and embedded it in a C++ program. Now we can run JS code outside of browsers, which enabled the use of JS to go beyond websites to other platforms like mobile.

ECMAScript is a specification which JavaScript follows. Note: the ES7+ extension means ECMAScript 7.

:: REACT THEORY ::

HTML create a "Document Object Model" or DOM which is a tree like structure to organise and link all the web pages. 

React removes the need to query DOM elements. Instead it uses components to write reusable, modular code that abstract away some of the finer details. E.g. a button, a side bar, a grid of items etc. these are all components which come together to make the app.

Vanilla JS is plain JS with no third party code. 
TS is used for plain typescript files, while TSX file extension is used for react components. either use a js class or js function. function based components are more popular these days so we will use. 

In the project structure for the new web app, we have some config files for the typescript compiler, a node_modules folder, a "public" folder for certain assets, and then the source folder called "src" which contains our typescript and css files.
Outside of this we have the index.html file which contains the project. it loads in the js and css files we will write.

Currently we have a component tree with parent (App) and child (Message). from this a JS structure is built called a virtual DOM. it's a light weight representation of the html DOM. the "nodes" in the virtual DOM are updated only when a change is made in the code in the components. react DOM is the library that enables these dynamic and fast changes to be implemented.
This is the "react-dom" we see as a dependency for the project.

Library vs Framework

A library provides specific functionality 
A framework is a set of tools and guidelines for building apps e.g. xamarin or .NET
React is just a tool, i.e. lib, for building a dynamic and interactive UI. but we need other tools for routing, making http calls, managing app state, displaying animations, validating forms etc. we can use any tools for any of these jobs because react is not limited to a specific toolset.

Props vs States of components
Props are the input or arguments passed to a component function
States are like the local variables inside a function for storing data about changes happening in the component
Props should be considered immutable, i.e. read-only, whereas states are data we expect will change.
Changing a prop of a component from within a component after it has been declared is bad practice, i.e. an antipattern in React.

Using the React Developer Tools Chrome Extension

Download from Chrome store. Ctrl+Shift+C to open the Inspect window.
Click the >> button next to Elements, Console etc. in the toolbar.
Components and Profiler are the two new tools. 
Components allows you to see the children, what component is rendering the currently selected component on screen, and search for components by name. 
Click the eye icon to see the matching DOM element on screen.
Click the </> icon to see the source code.

:: SHORTCUTS ::

___Chrome____
control T for new tab
control F5 for refresh page
control tab to switch tabs
control w to close current tab

___VS Code___
control d for multi cursor on selected text

___Windows OS___
win P to change multi screen to extension mode
win arrows to shift the location and shape of current window
win L to lock screen

:: RESOURCES ::


Your order ID: 130623057
Coding with Mosh; React 18 the ultimate couse

